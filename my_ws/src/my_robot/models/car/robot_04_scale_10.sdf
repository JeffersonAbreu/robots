<?xml version="1.0"?>
<sdf version="1.9">
    <world name="car_world">
        <physics name="1ms" type="ignored">
            <max_step_size>0.001</max_step_size>
            <real_time_factor>1.0</real_time_factor>
        </physics>
        <plugin
            filename="libignition-gazebo-physics-system.so"
            name="ignition::gazebo::systems::Physics">
        </plugin>
        <plugin
            filename="libignition-gazebo-user-commands-system.so"
            name="ignition::gazebo::systems::UserCommands">
        </plugin>
        <plugin
            filename="libignition-gazebo-scene-broadcaster-system.so"
            name="ignition::gazebo::systems::SceneBroadcaster">
        </plugin>

        <light type="directional" name="sun">
            <cast_shadows>true</cast_shadows>
            <pose>0 0 10 0 0 0</pose>
            <diffuse>0.8 0.8 0.8 1</diffuse>
            <specular>0.2 0.2 0.2 1</specular>
            <attenuation>
                <range>1000</range>
                <constant>0.9</constant>
                <linear>0.01</linear>
                <quadratic>0.001</quadratic>
            </attenuation>
            <direction>-0.5 0.1 -0.9</direction>
        </light>

        <model name="ground_plane">
            <static>true</static>
            <link name="link">
                <collision name="collision">
                    <geometry>
                        <plane>
                            <normal>0 0 1</normal>
                        </plane>
                    </geometry>
                </collision>
                <visual name="visual">
                    <geometry>
                        <plane>
                            <normal>0 0 1</normal>
                            <size>100 100</size>
                        </plane>
                    </geometry>
                    <material>
                        <ambient>0.8 0.8 0.8 1</ambient>
                        <diffuse>0.8 0.8 0.8 1</diffuse>
                        <specular>0.8 0.8 0.8 1</specular>
                    </material>
                </visual>
            </link>
        </model>

        <model name='vehicle_blue' canonical_link='chassis_link'>
            <!-- 
                A tag <pose> e usada para definir a posicao e a orientacao do nosso modelo, e o atributo
                relative_to e usado para definir a pose do modelo em relacao a qualquer outro quadro. Se
                relative_to nao for definido, a <pose> do modelo sera relativa ao mundo.
            -->
            <pose relative_to='world'>0 0 0 0 0 0</pose>
            <!-- 
                Os valores dentro da tag <pose> sao os seguintes: <pose>X Y Z R P Y</pose>,
                onde X, Y, Z representam a posicao do quadro e
                R, P, Y representam a orientacao em 
                    Roll (Rotacao em Rolo): O movimento de rotacao ao longo do eixo X. Imagine um aviao fazendo um
                    movimento de rolagem no ar, onde uma asa se eleva enquanto a outra abaixa. O angulo de
                    roll e medido em relacao ao eixo X, e geralmente e expresso em graus ou radianos.

                    Pitch (Arfagem): O movimento de rotacao ao longo do eixo Y. Isso e semelhante ao movimento de
                    inclinacao de um objeto para cima ou para baixo. O angulo de pitch e medido em relacao
                    ao eixo Y e tambem e expresso em graus ou radianos.

                    Yaw (Guinada): O movimento de rotacao ao longo do eixo Z. e como girar um objeto ao redor do eixo
                    vertical. O angulo de yaw e medido em relacao ao eixo Z e, assim como os outros, e
                    expresso em graus ou radianos.
            -->

            <link name='chassis_link'>
                <pose relative_to='__model__'>0 0 .5 0 0 0</pose>

                <inertial>
                    <!--
                        inertial properties of the link mass, inertia matix
                    -->
                    <mass>0.12859</mass>
                    <inertia>
                        <inertia>
                            <ixx>5.2146E-05</ixx>
                            <ixy>-1.2223E-19</ixy>
                            <ixz>2.9403E-20</ixz>
                            <iyy>0.00017957</iyy>
                            <iyz>1.8099E-14</iyz>
                            <izz>0.00022799</izz>
                        </inertia>
                    </inertia>
                </inertial>
                <visual name='visual'>
                    <!-- 
                        Como o nome sugere, a tag `<visual>` e responsavel por como nosso link aparecera. Definimos a forma
                        do nosso link dentro da tag `<geometry>` como um `<box>` (um paralelepipedo) e,
                        em seguida, especificamos as tres dimensoes (em metros) desta caixa dentro da
                        tag `<size>`. Em seguida, dentro da tag `<material>`, definimos o material do
                        nosso link. Aqui, definimos as cores `<ambient>`, `<diffuse>` e `<specular>` em
                        um conjunto de quatro numeros, cada um na faixa de [0, 1], representando
                        vermelho/verde/azul/alfa.
                    -->
                    <geometry>
                        <mesh>
                            <uri>model://meshes/chassis_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                    <!--let's
                    add color to our link-->
                    <material>
                        <ambient>0.0 0.0 1.0 1</ambient>
                        <diffuse>0.0 0.0 1.0 1</diffuse>
                        <specular>0.0 0.0 1.0 1</specular>
                    </material>
                </visual>
                <collision name='collision'>
                    <!-- 
                        A tag `<collision>` define as propriedades de colisao do link, como nosso link reagira com outros
                        objetos e o efeito do mecanismo de fisica sobre ele.

                        Observacao: `<collision>` pode ser diferente das propriedades visuais, por exemplo, modelos de
                        colisao mais simples sao frequentemente usados para reduzir o tempo de calculo.
                        Isso significa que a representacao da colisao pode ser mais simples do que a
                        representacao visual do objeto, a fim de otimizar o desempenho computacional
                        durante a simulacao.
                    -->
                    <geometry>
                        <mesh>
                            <uri>model://meshes/chassis_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                </collision>
            </link>

            <!-- Adicione a câmera -->
            <link name="camera_link">
                <pose relative_to="chassis_link">-0.98 0 .05 0 0 0</pose>
                <inertial>
                    <mass>0.001</mass>
                    <inertia>
                        <ixx>0.000166667</ixx>
                        <iyy>0.000166667</iyy>
                        <izz>0.000166667</izz>
                    </inertia>
                </inertial>
                <collision name="collision">
                    <geometry>
                        <box>
                            <size>0.05 0.1 0.1</size>
                        </box>
                    </geometry>
                </collision>
                <visual name="visual">
                    <geometry>
                        <box>
                            <size>0.05 0.1 0.1</size>
                        </box>
                    </geometry>
                </visual>
                <camera name="camera">
                    <pose>0 0 1 0 0 0</pose> <!-- Posição e orientação da câmera -->
                    <horizontal_fov>1.047</horizontal_fov>
                    <!-- Campo de visão horizontal em radianos (60 graus) -->
                    <image>
                        <width>640</width> <!-- Largura da imagem -->
                        <height>480</height> <!-- Altura da imagem -->
                        <format>R8G8B8</format> <!-- Formato da imagem (RGB) -->
                    </image>
                    <clip>
                        <near>0.1</near> <!-- Distância de corte próxima -->
                        <far>100</far> <!-- Distância de corte distante -->
                    </clip>
                </camera>
            </link>
            <joint name='camera_joint' type='fixed'>
                <pose relative_to='camera_link' />
                <parent>chassis_link</parent>
                <child>camera_link</child>
            </joint>


            <!-- Adicione o sensor LiDAR -->
            <link name="lidar_link">
                <pose relative_to="camera_link">0 0 .075 0 0 0</pose>
                <inertial>
                    <mass>0.001</mass>
                    <inertia>
                        <ixx>0.000166667</ixx>
                        <iyy>0.000166667</iyy>
                        <izz>0.000166667</izz>
                    </inertia>
                </inertial>
                <visual name='visual'>
                    <geometry>
                        <cylinder>
                            <radius>0.05</radius>
                            <length>0.05</length>
                        </cylinder>
                    </geometry>
                    <material>
                        <ambient>0.0 1 0.0 1</ambient>
                        <diffuse>0.0 1 0.0 1</diffuse>
                        <specular>0.0 1 0.0 1</specular>
                    </material>
                </visual>
                <!-- LiDAR -->
                <sensor name="lidar" type="ray">
                    <pose>0 0 1 0 0 0</pose> <!-- Posição e orientação do sensor -->
                    <visualize>true</visualize>
                    <update_rate>10.0</update_rate> <!-- Taxa de atualização em Hz -->
                    <ray>
                        <scan>
                            <horizontal>
                                <samples>360</samples> <!-- Número de amostras para 360 graus -->
                                <resolution>1</resolution> <!-- Resolução angular em graus -->
                                <min_angle>-1.5708</min_angle> <!-- Ângulo mínimo (-90 graus) -->
                                <max_angle>1.5708</max_angle> <!-- Ângulo máximo (90 graus) -->
                            </horizontal>
                        </scan>
                        <range>
                            <min>0.01</min> <!-- Distância mínima de detecção (em metros) -->
                            <max>50.0</max> <!-- Distância máxima de detecção (em metros) -->
                            <resolution>0.01</resolution> <!-- Resolução da distância (em metros) -->
                        </range>
                    </ray>
                </sensor>
            </link>
            <joint name='lidar_joint' type='fixed'>
                <pose relative_to='lidar_link' />
                <parent>camera_link</parent>
                <child>lidar_link</child>
            </joint>
            <!-- 
                Definindo um quadro arbitrario
                A partir do SDF 1.7 (Fortress utiliza o SDF 1.8), podemos definir quadros arbitrarios.
                Ele tem dois atributos:
                   name: o nome do quadro.
                   attached_to: o nome do quadro ou do elo ao qual este quadro esta anexado.
            -->

            <!--
                caster wheel
                Nos nomeamos nosso quadro como "caster_frame" e o anexamos ao elo "chassis_link". Em seguida,
            usamos a
                tag `<pose>` para definir a posicao e orientacao do quadro. Nao usamos o atributo
                `relative_to`, portanto, a pose e em relacao ao quadro nomeado no atributo
                `attached_to`, que e o "chassis_link" no nosso caso.
            -->

            <link name='left_wheel'>
                <!-- 
                Definimos o nome do nosso link como `left_wheel` e, em seguida, definimos sua `<pose>` em relacao
                ao link `chassis_link`. A roda precisava ser posicionada a esquerda e atras do chassi,
                razao pela qual escolhemos os valores para a pose como -0.5 0.6 0. Alem disso, nossa
                roda e um cilindro, mas esta deitada de lado. Portanto, definimos o valor de
                orientacao como -1.5707 0 0, que representa uma rotacao de -90 graus em torno do
                eixo x (os angulos estao em radianos). Em seguida, definimos as propriedades de
                inercia da roda, a massa e a matriz de inercia.
            -->
                <!-- <pose relative_to="chassis_link">-0.333 0.80917 -0.14 -1.5708 0 0</pose> -->
                <pose relative_to="chassis_link">-0.33259 0.8025 -0.1375 -1.5708 0.42481 0</pose>
                <inertial>
                    <mass>0.021404</mass>
                    <inertia>
                        <ixx>8.6283E-06</ixx>
                        <ixy>-6.4381E-11</ixy>
                        <ixz>-1.062E-13</ixz>
                        <iyy>8.6269E-06</iyy>
                        <iyz>-9.8999E-12</iyz>
                        <izz>1.4515E-05</izz>
                    </inertia>
                </inertial>

                <visual name='visual'>
                    <geometry>
                        <mesh>
                            <uri>model://meshes/roda_esquerda_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                    <material>
                        <ambient>1 0 0 1</ambient>
                        <diffuse>1 0 0 1</diffuse>
                        <specular>1 0 0 1</specular>
                    </material>
                </visual>
                <collision name='collision'>
                    <geometry>
                        <mesh>
                            <uri>model://meshes/roda_esquerda_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                </collision>
            </link>
            <!-- Junta da Roda Esquerda -->
            <joint name='left_wheel_joint' type='revolute'>
                <pose relative_to='left_wheel' />
                <!-- 
                    Nossa primeira junta e a `left_wheel_joint`. Ela possui dois atributos: `name='left_wheel_joint'` e
                    `type='revolute'`. O tipo `revolute` fornece 1 grau de liberdade rotacional com limites
                    de junta. A pose da junta e a mesma que o quadro do elo filho, que e o quadro
                    `left_wheel`.
                -->
                <parent>chassis_link</parent>
                <child>left_wheel</child>
                <!-- 
                    Cada junta conecta dois elos (corpos) juntos. Aqui, estamos conectando o "chassis_link" com a
                    "left_wheel". "chassis_link" e o elo pai e "left_wheel" e o elo filho.
                -->
                <axis>
                    <xyz expressed_in='__model__'>0 1 0</xyz>
                    <!--
                        As juntas podem ser definidas como qualquer quadro ou ate mesmo quadros
                        arbitrarios.
                    -->
                    <limit>
                        <lower>-1.79769e+308</lower>    <!--negative
                        infinity-->
                        <upper>1.79769e+308</upper>     <!--positive
                        infinity-->
                    </limit>
                </axis>
                <!-- 
                    Aqui nos definimos o eixo de rotacao. O eixo de rotacao pode ser qualquer quadro, nao apenas o
                    quadro pai ou filho. Escolhemos o eixo y em relacao ao quadro do modelo, entao
                    colocamos 1 no elemento y e zeros nos outros. Para a junta revoluta, precisamos
                    definir os limites do angulo de rotacao nos tags `<lower>` e `<upper>`.

                    Observacao: Os angulos estao em radianos.
                -->
            </joint>
            <!-- 
                O mesmo que a roda esquerda, mas com uma posicao diferente
            -->
            <link name='right_wheel'>
                <!-- <pose relative_to="chassis_link">-0.333 -0.80917 -0.14 -1.5707 0 0</pose> -->
                <pose relative_to="chassis_link">-0.33259 -0.8025 -0.1375 1.5708 0.042481 -3.1416</pose>
                <inertial>
                    <mass>0.021404</mass>
                    <inertia>
                        <ixx>8.6283E-06</ixx>
                        <ixy>6.4381E-11</ixy>
                        <ixz>-1.062E-13</ixz>
                        <iyy>8.6269E-06</iyy>
                        <iyz>9.8999E-12</iyz>
                        <izz>1.4515E-05</izz>
                    </inertia>
                </inertial>
                <visual name='visual'>
                    <geometry>
                        <mesh>
                            <uri>model://meshes/roda_direita_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                    <material>
                        <ambient>1 0 0 1</ambient>
                        <diffuse>1 0 0 1</diffuse>
                        <specular>1 0 0 1</specular>
                    </material>
                </visual>
                <collision name='collision'>
                    <geometry>
                        <mesh>
                            <uri>model://meshes/roda_direita_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                </collision>
            </link>
            <joint name='right_wheel_joint' type='revolute'>
                <pose relative_to='right_wheel' />
                <parent>chassis_link</parent>
                <child>right_wheel</child>
                <axis>
                    <xyz expressed_in='__model__'>0 1 0</xyz>
                    <limit>
                        <lower>-1.79769e+308</lower>    <!--negative
                        infinity-->
                        <upper>1.79769e+308</upper>     <!--positive
                        infinity-->
                    </limit>
                </axis>
            </joint>
            <frame name="caster_frame" attached_to='chassis_link'>
                <!--<pose>0.74
                0 -0.025075 600 0 0</pose>-->
                <pose>0.72581 0 -0.025 -3.1408 0 0</pose>
            </frame>
            <link name='base_castor_link'>
                <pose relative_to='caster_frame' />
                <inertial>
                    <mass>0.002</mass>
                    <inertia>
                        <ixx>0.0001</ixx>
                        <ixy>0</ixy>
                        <ixz>0</ixz>
                        <iyy>0.0001</iyy>
                        <iyz>0</iyz>
                        <izz>0.0001</izz>
                    </inertia>
                </inertial>
                <visual name='visual'>
                    <geometry>
                        <mesh>
                            <uri>model://meshes/base_castor_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                    <material>
                        <ambient>0.0 1 0.0 1</ambient>
                        <diffuse>0.0 1 0.0 1</diffuse>
                        <specular>0.0 1 0.0 1</specular>
                    </material>
                </visual>
                <collision name='collision'>
                    <geometry>
                        <mesh>
                            <uri>model://meshes/base_castor_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                </collision>
            </link>
            <joint name='base_castor_joint' type='revolute'>
                <pose relative_to='base_castor_link' />
                <parent>chassis_link</parent>
                <child>base_castor_link</child>
                <axis>
                    <xyz expressed_in='__model__'>0 0 1</xyz>
                    <limit>
                        <lower>-1.79769e+308</lower>    <!--negative
                        infinity-->
                        <upper>1.79769e+308</upper>     <!--positive
                        infinity-->
                    </limit>
                </axis>
            </joint>
            <link name='castor_wheel_link'>
                <!-- <pose relative_to="base_castor_link">0.152 0 0.231 -1.571 0 0</pose> -->
                <pose relative_to="base_castor_link">0.152 0 0.231 -1.571 0 0</pose>
                <inertial>
                    <mass>0.00828739992319076</mass>
                    <inertia>
                        <ixx>6.3926680927577E-07</ixx>
                        <ixy>-7.31657239076889E-23</ixy>
                        <ixz>4.99800544060975E-23</ixz>
                        <iyy>6.39299912774584E-07</iyy>
                        <iyz>3.50834634007177E-09</iyz>
                        <izz>1.01108533248037E-06</izz>
                    </inertia>
                </inertial>
                <visual name='visual'>
                    <geometry>
                        <mesh>
                            <uri>model://meshes/roda_castor_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                    <material>
                        <ambient>1 0 0 1</ambient>
                        <diffuse>1 0 0 1</diffuse>
                        <specular>1 0 0 1</specular>
                    </material>
                </visual>
                <collision name='collision'>
                    <geometry>
                        <mesh>
                            <uri>model://meshes/roda_castor_link.stl</uri>
                            <scale>10 10 10</scale>
                        </mesh>
                    </geometry>
                </collision>
            </link>
            <joint name='castor_wheel_joint' type='revolute'>
                <pose relative_to='castor_wheel_link' />
                <parent>base_castor_link</parent>
                <child>castor_wheel_link</child>
                <axis>
                    <xyz expressed_in='__model__'>0 1 0</xyz>
                    <limit>
                        <lower>-1.79769e+308</lower>    <!--negative
                        infinity-->
                        <upper>1.79769e+308</upper>     <!--positive
                        infinity-->
                    </limit>
                </axis>
            </joint>
            <plugin
                filename="libignition-gazebo-diff-drive-system.so"
                name="ignition::gazebo::systems::DiffDrive">
                <left_joint>left_wheel_joint</left_joint>
                <right_joint>right_wheel_joint</right_joint>
                <wheel_separation>1.2</wheel_separation>
                <wheel_radius>0.4</wheel_radius>
                <odom_publish_frequency>1</odom_publish_frequency>
                <topic>cmd_vel</topic>
            </plugin>
            <!-- 
                Inicie o mundo do robô:
                ```bash
                    ign gazebo building_robot.sdf
                ```
                Em outro terminal, vamos enviar uma mensagem para o nosso robô:
                ```bash
                    ign topic -t "/cmd_vel" -m ignition.msgs.Twist -p "linear: {x: 0.5}, angular: {z: 0.05}"
                ```

                Isso enviará um comando para o robô com uma velocidade linear de 0,5 e uma velocidade angular de
                0,05, fazendo com que o robô se mova. Certifique-se de que o mundo do robô já esteja em
                execução no primeiro terminal antes de enviar o comando.

                Agora você deve ter o seu robô se movendo na simulação.
                  Observação: Não esqueça de pressionar o botão de reprodução na simulação.

                O comando especifica o tópico para publicação após a opção -t. Após a opção -m, especificamos o
                tipo de mensagem. Nosso robô espera mensagens do tipo Twist, que consiste em dois
                componentes, linear e angular. Após a opção -p, especificamos o conteúdo (valor) da
                mensagem: velocidade linear x: 0,5 e velocidade angular z: 0,05.

                Dica: Você pode descobrir o que cada opção do tópico faz usando este comando:
                ```bash
                    ign topic -h
                ```
                Para obter mais informações sobre Tópicos e Mensagens no Ignition, consulte os tutoriais da
                biblioteca de Transport.

                # Para mover o robô usando as teclas do teclado, você pode adicionar dois novos plugins:
                    KeyPublisher e TriggeredPublisher.

                KeyPublisher é um plugin do ign-gui que lê as teclas do teclado e as envia para um tópico padrão
                /keyboard/keypress. Vamos tentar este plugin da seguinte maneira:

                1. Em um terminal, digite:

                ```bash
                    ign gazebo building_robot.sdf
                ```

                2. No canto superior direito da janela de simulação, clique na lista suspensa de plugins
                (ícone de três pontos verticais) e selecione Key Publisher.

                3. Em outro terminal, digite:
                ```bash
                    ign topic -e -t /keyboard/keypress
                ```

                Este último comando exibirá todas as mensagens enviadas no tópico /keyboard/keypress.

                Na janela do Ignition, pressione diferentes teclas e você deverá ver dados (números) no terminal
                onde você executou o comando `ign topic -e -t /keyboard/keypress`. Isso indica que o
                KeyPublisher está lendo as teclas do teclado e enviando as informações para o tópico.
            -->
        </model>
        <!-- Moving Forward-->
        <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
            <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
                <match field="data">16777235</match>
            </input>
            <output type="ignition.msgs.Twist" topic="/cmd_vel">
                linear: {x: -0.5}, angular: {z: 0.0}
            </output>
        </plugin>

        <!-- Moving Backward-->
        <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
            <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
                <match field="data">16777237</match>
            </input>
            <output type="ignition.msgs.Twist" topic="/cmd_vel">
                linear: {x: 0.5}, angular: {z: 0.0}
            </output>
        </plugin>

        <!-- Rotating Left-->
        <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
            <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
                <match field="data">16777234</match>
            </input>
            <output type="ignition.msgs.Twist" topic="/cmd_vel">
                linear: {x: 0.0}, angular: {z: 0.5}
            </output>
        </plugin>

        <!-- Rotating Right-->
        <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
            <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
                <match field="data">16777236</match>
            </input>
            <output type="ignition.msgs.Twist" topic="/cmd_vel">
                linear: {x: 0.0}, angular: {z: -0.5}
            </output>
        </plugin>

        <!-- Stop Number Zero -->
        <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
            <input type="ignition.msgs.Int32" topic="/keyboard/keypress">
                <match field="data">48</match>
            </input>
            <output type="ignition.msgs.Twist" topic="/cmd_vel">
                linear: {x: 0.0}, angular: {z: 0.0}
            </output>
        </plugin>
    </world>
</sdf>